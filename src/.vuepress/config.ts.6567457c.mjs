// src/.vuepress/config.ts
import { defineUserConfig } from "vuepress";

// src/.vuepress/theme.ts
import { hopeTheme } from "vuepress-theme-hope";

// src/.vuepress/navbar/index.ts
import { navbar } from "vuepress-theme-hope";
var zhNavbar = navbar([
  "/",
  {
    text: "\u5B66\u4E60",
    icon: "book",
    link: "/Learn/"
  },
  {
    text: "\u751F\u6D3B",
    icon: "ice-cream",
    link: "/Life/"
  }
]);

// src/.vuepress/sidebar/index.ts
import { sidebar } from "vuepress-theme-hope";
var zhSidebar = sidebar({
  "/": [
    {
      text: "RUI",
      link: "/README.md",
      icon: "house"
    },
    {
      text: "\u5B66\u4E60",
      icon: "book",
      collapsible: true,
      prefix: "Learn/",
      children: [
        {
          icon: "robot",
          text: "RM",
          prefix: "RM/",
          collapsible: true,
          children: "structure"
        },
        {
          icon: "server",
          text: "Linux",
          prefix: "Linux/",
          collapsible: true,
          children: "structure"
        },
        {
          icon: "docker",
          text: "Docker",
          prefix: "Docker/",
          collapsible: true,
          children: "structure"
        }
      ]
    },
    {
      text: "\u751F\u6D3B",
      icon: "ice-cream",
      prefix: "Life/",
      collapsible: true,
      children: "structure"
    }
  ],
  "/Life/": "structure",
  "/img/": "structure",
  "/Learn/": [
    "",
    {
      icon: "robot",
      text: "RM",
      prefix: "RM/",
      collapsible: true,
      children: "structure"
    },
    {
      icon: "server",
      text: "Linux",
      prefix: "Linux/",
      collapsible: true,
      children: "structure"
    },
    {
      icon: "docker",
      text: "Docker",
      prefix: "Docker/",
      collapsible: true,
      children: "structure"
    }
  ]
});

// src/.vuepress/theme.ts
var theme_default = hopeTheme({
  hostname: "https://vuepress-theme-hope-docs-demo.netlify.app",
  author: {
    name: "RUI",
    url: "http://bestrui.top"
  },
  iconAssets: "//at.alicdn.com/t/c/font_3837767_ns93kih665.css",
  repo: "bestruirui/RUI_KNOWLEDGE",
  docsDir: "/",
  docsBranch: "PAGE",
  repoDisplay: false,
  hideSiteNameOnMobile: false,
  contributors: false,
  pageInfo: ["Author", "Original", "Date", "Category", "Tag", "ReadingTime"],
  sidebarSorter: ["readme"],
  toc: true,
  navbarLayout: {
    left: ["Brand"],
    center: ["Links"],
    right: ["Language", "Repo", "Outlook", "Search"]
  },
  locales: {
    "/": {
      navbar: zhNavbar,
      sidebar: zhSidebar,
      footer: "",
      displayFooter: false,
      metaLocales: {
        editLink: "\u7F16\u8F91\u6B64\u9875"
      }
    }
  },
  encrypt: {
    config: {
      "/Learn/RM/BUG/": "1234"
    }
  },
  plugins: {
    comment: {
      provider: "Waline",
      serverURL: "https://rui_waline.deta.dev",
      meta: ["nick", "mail"],
      requiredMeta: ["nick", "mail"]
    },
    photoSwipe: true,
    mdEnhance: {
      align: true,
      attrs: true,
      chart: true,
      codetabs: true,
      container: true,
      demo: true,
      echarts: true,
      figure: true,
      flowchart: true,
      gfm: true,
      imageLazyload: true,
      imageSize: true,
      include: true,
      katex: true,
      mark: true,
      mermaid: true,
      tabs: true,
      imageMark: true,
      playground: {
        presets: ["ts", "vue"]
      },
      presentation: {
        plugins: ["highlight", "math", "search", "notes", "zoom"]
      },
      stylize: [
        {
          matcher: "Recommended",
          replacer: ({ tag }) => {
            if (tag === "em")
              return {
                tag: "Badge",
                attrs: { type: "tip" },
                content: "Recommended"
              };
          }
        }
      ],
      sub: true,
      sup: true,
      vPre: true,
      vuePlayground: true
    },
    pwa: {
      favicon: "/logo.svg",
      cacheHTML: true,
      cachePic: true,
      appendBase: true,
      showInstall: true,
      apple: {
        icon: "/assets/icon/apple-icon-152.png",
        statusBarColor: "black"
      },
      msTile: {
        image: "/assets/icon/ms-icon-144.png",
        color: "#ffffff"
      },
      manifest: {
        icons: [
          {
            src: "/assets/icon/chrome-mask-512.png",
            sizes: "512x512",
            purpose: "maskable",
            type: "image/png"
          },
          {
            src: "/assets/icon/chrome-mask-192.png",
            sizes: "192x192",
            purpose: "maskable",
            type: "image/png"
          },
          {
            src: "/assets/icon/chrome-512.png",
            sizes: "512x512",
            type: "image/png"
          },
          {
            src: "/assets/icon/chrome-192.png",
            sizes: "192x192",
            type: "image/png"
          }
        ],
        shortcuts: [
          {
            name: "Demo",
            short_name: "Demo",
            url: "/demo/",
            icons: [
              {
                src: "/assets/icon/guide-maskable.png",
                sizes: "192x192",
                purpose: "maskable",
                type: "image/png"
              },
              {
                src: "/assets/icon/guide-monochrome.png",
                sizes: "192x192",
                purpose: "monochrome",
                type: "image/png"
              }
            ]
          }
        ]
      }
    }
  }
});

// src/.vuepress/config.ts
import { searchPlugin } from "@vuepress/plugin-search";
var config_default = defineUserConfig({
  base: "/",
  locales: {
    "/": {
      lang: "zh-CN",
      title: "RUI",
      description: " "
    }
  },
  theme: theme_default,
  shouldPrefetch: false,
  plugins: [
    searchPlugin({
      maxSuggestions: 10
    })
  ]
});
export {
  config_default as default
};
//# sourceMappingURL=data:application/json;base64,
